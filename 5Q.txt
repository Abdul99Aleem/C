#include <stdio.h>

// Function to calculate the determinant of a 3x3 matrix
float determinant(float mat[3][3]) {
    return mat[0][0] * (mat[1][1] * mat[2][2] - mat[2][1] * mat[1][2]) -
           mat[0][1] * (mat[1][0] * mat[2][2] - mat[2][0] * mat[1][2]) +
           mat[0][2] * (mat[1][0] * mat[2][1] - mat[2][0] * mat[1][1]);
}

// Function to calculate the adjoint of a 3x3 matrix
void adjoint(float mat[3][3], float adj[3][3]) {
    adj[0][0] = mat[1][1] * mat[2][2] - mat[2][1] * mat[1][2];
    adj[0][1] = mat[0][2] * mat[2][1] - mat[2][2] * mat[0][1];
    adj[0][2] = mat[0][1] * mat[1][2] - mat[1][1] * mat[0][2];
    adj[1][0] = mat[1][2] * mat[2][0] - mat[2][2] * mat[1][0];
    adj[1][1] = mat[0][0] * mat[2][2] - mat[2][0] * mat[0][2];
    adj[1][2] = mat[0][2] * mat[1][0] - mat[1][2] * mat[0][0];
    adj[2][0] = mat[1][0] * mat[2][1] - mat[2][0] * mat[1][1];
    adj[2][1] = mat[0][1] * mat[2][0] - mat[2][1] * mat[0][0];
    adj[2][2] = mat[0][0] * mat[1][1] - mat[1][0] * mat[0][1];
}

// Function to calculate the inverse of a 3x3 matrix
void inverse(float mat[3][3], float inv[3][3]) {
    float det = determinant(mat);

    if (det == 0) {
        printf("The matrix is singular. Inverse does not exist.\n");
        return;
    }

    float adj[3][3];
    adjoint(mat, adj);

    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            inv[i][j] = adj[i][j] / det;
        }
    }
}

// Function to display a matrix
void displayMatrix(float mat[3][3]) {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            printf("%.2f\t", mat[i][j]);
        }
        printf("\n");
    }
}

int main() {
    float matrix[3][3];

    // Input the 3x3 matrix elements
    printf("Enter the elements of the 3x3 matrix:\n");
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            scanf("%f", &matrix[i][j]);
        }
    }

    // Calculate and display the determinant
    printf("\nDeterminant: %.2f\n", determinant(matrix));

    // Calculate and display the adjoint
    float adjointMatrix[3][3];
    adjoint(matrix, adjointMatrix);
    printf("\nAdjoint:\n");
    displayMatrix(adjointMatrix);

    // Calculate and display the inverse
    float inverseMatrix[3][3];
    inverse(matrix, inverseMatrix);
    printf("\nInverse:\n");
    displayMatrix(inverseMatrix);

    return 0;
}
